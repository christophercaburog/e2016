<?php

/**
 * BlockBase is the base class for the 'blocks' system. simply extend this class to use.
 *
 * @author aljo fabro <acfabro@gmail.com>
 * @package blocks
 */

//require_once(SYSCONFIG_ROOT_PATH.'configurations/smarty/Smarty.class.php');

/**
 * BlockBase is the base class for the 'blocks' system. simply extend this class to use.
 */
class BlockBasePHP {

	/**
	 * Array containing parameters passed to the block. Parameters may be used by blocks internally or externally by other functions.
	 * @var array Array of parameters. Parameter list depends on the implementation.
	 */
	var $params;

	var $templateTheme;

	/**
	 * The filename of the template file, without path
	 * @var string Filename of the template file (*.tpl)
	 */
	var $templateFile;

	/**
	 * The directory for theme files
	 * @var String dir location
	 */
	var $templateDir;

	var $listVars;

	/**
	 * Constructor
	 */
	function BlockBasePHP() {

		// smarty init
		// parent::Smarty();
		$this->params = array();
		$this->listVars = array();

		// default theme
		$this->templateTheme = SYSCONFIG_THEME;

		$this->config_dir  = SYSCONFIG_COMMON_PATH;

		// dir locations
		$this->assign('SYSCONFIG_ROOT_PATH',SYSCONFIG_ROOT_PATH);
		$this->assign('SYSCONFIG_CLASS_PATH',SYSCONFIG_CLASS_PATH);
		$this->assign('SYSCONFIG_MODULE_PATH',SYSCONFIG_MODULE_PATH);
		$this->assign('SYSCONFIG_URL_PATH',SYSCONFIG_URL_PATH);
		$this->assign('SYSCONFIG_IMAGE_PATH',SYSCONFIG_IMAGE_PATH);

		// template specific dirs
		$this->templateDir = SYSCONFIG_THEME_PATH.$this->templateTheme.'/templates/';
		$this->assign('themeImagesPath',SYSCONFIG_THEME_URLPATH.$this->templateTheme."/images/");
		$this->assign('themeCSSPath',SYSCONFIG_THEME_URLPATH.$this->templateTheme."/css/");
		$this->assign("themePath",SYSCONFIG_THEME_PATH.$this->templateTheme."/");
		$this->assign("themeUrlPath",SYSCONFIG_THEME_URLPATH.$this->templateTheme."/");
		$this->assign("themeJQueryPath",SYSCONFIG_URL_PATH."includes/jquery/");
		$this->assign("appTitle",SYSCONFIG_TITLE);
		$this->assign("companyName",SYSCONFIG_COMPANY);

	}

	function assign($name, $val) {
		$this->listVars[$name] = $val;
	}

	/**
	 * Sets a block's parameter.
	 * @param string $pname Parameter name
	 * @param mixed $pvalue Parameter value
	 */
	function setParam( $pname, $pvalue ) {
		$this->params[$pname] = $pvalue;
	}

	/**
	 * Unsets a block's parameter.
	 * @param string $pname Parameter name
	 * @param mixed $pvalue Parameter value
	 */
	function unsetParam( $pname ) {
		unset($this->params[$pname]);
	}

	/**
	 * Retrieves a parameter from the block's parameter list
	 * @param string $pname Parameter
	 * @return mixed
	 */
	function getParam( $pname ) {
		return isset($this->params[$pname])?$this->params[$pname]:null;
	}

	/**
	 * Passes parameters from the data array and to the smarty template. May be overridden to bind other parameters to the template.
	 */
	function bindParams() {
		foreach ( $this->params as $pname => $pvalue ) {
			$this->assign($pname,$pvalue);
		}
	}

	/**
	 * Calls bindParams(). May be overridden to bind other variables to the template.
	 */
	function process() {
		$this->bindParams();

	}

	/**
	 * Return html generated by the Smarty engine without displaying the output.
	 * @return string HTML generated by the Smarty engine.
	 */
	function fetchBlock() {
		$this->process();

		ob_start();
		foreach ($this->listVars as $varName => $varValue) {
			${$varName} =& $this->listVars[$varName];
		}
//		$lstVar = $this->listVars;
		include($this->templateDir.'/'.$this->templateFile);
		$content = ob_get_clean();

		return $content;
	}

	/**
	 * Renders and displays the HTML output of the block.
	 */
	function displayBlock() {
		print $this->fetchBlock();
	}

}

/**
 * HTML HELPER MODULE 
 */

/**
 * html_options list using an array
 *
 * @param array $options_
 * @param string $selected_
 * @param bool $useKeys_
 * @return string
 */
function html_options($options_ , $selected_ = null, $useKeys_ = true){
	$tOptions="";

	if (!is_array($options_)) return null;
	
	if ($useKeys_) {
		foreach ($options_ as $key => $value) {
			$selected = ($selected_==$key)?"selected='true'":"";
			$tOptions .= "<option value='$key' $selected>$value</option>";
		}
	}else {
		foreach ($options_ as $value) {
			$selected = ($selected_==$value)?"selected='true'":"";
			$tOptions .= "<option value='$value' $selected>$value</option>";
		}
	}
	return $tOptions;
}

/**
 * html_options list using a 2D array
 *
 * @param array $options_
 * @param string $keyValue_
 * @param string $keyOutput_
 * @param string $selected_
 * @param bool $useKeys_
 * @return string
 */
function html_options_2d($options_ ,$keyValue_ , $keyOutput_ , $selected_ = null, $useKeys_ = true){
	$tOptions="";
	
	if (!is_array($options_)) return null;
	
	if ($useKeys_) {
		foreach ($options_ as $key => $value) {
			$selected = ($selected_==$key)?"selected='true'":"";
			$tOptions .= "<option value='$key' $selected>$value[$keyOutput_]</option>";
		}
	}else {
		foreach ($options_ as $value) {
			$selected = ($selected_==$value[$keyValue_])?"selected='true'":"";
			$tOptions .= "<option value='$value[$keyValue_]' $selected>$value[$keyOutput_]</option>";
		}
	}
	return $tOptions;
}

/**
 * html_text texbox: exclusive for assigning textbox with value in joborder_form(edit)
 *
 * @param array $arrOdata
 * @param string $keyValue_
 * @param string $keyOutput_
 * @param string $tsg_id
 * @param array $oData_i
 * @param int $ctr_i
 * @return string
 */
function html_text($arrOdata ,$keyValue_ , $keyOutput_ , $tsg_id, $oData_i, $ctr_i){
	$tBox="";
	$selected="";
	
	if (!is_array($arrOdata)) return null;
	
	$tBox.="<table border='0' cellpadding='0' cellspacing='2'>";
	
			foreach ($arrOdata as $key => $value) {
				$selected= ($value['tsg_id']==$tsg_id)?true:"";
				$tsid = $value['ts_id'];
				$val = ($oData_i[$tsid]!="")?"value='$oData_i[$tsid]'":"value=''";
				
				if($selected!=""){
						
					if($i % 5==0){
						$tBox .="</tr>";
						$tBox .="<tr>";
						$tBox .="<td>$value[$keyOutput_]</td>";
						$tBox .="<td><input type='text' name='size[$ctr_i][$tsid]' id='size[$ctr_i][$tsid]' value='$oData_i[$tsid]' /></td>";
						
					}
					else {
						$tBox .="<td>$value[$keyOutput_]</td>";
						$tBox .="<td><input type='text' name='size[$ctr_i][$tsid]' id='size[$ctr_i][$tsid]' value='$oData_i[$tsid]' /></td>";
					}
					$i++;
					
				}
			}
	$tBox.="</table>";
	return $tBox;
}
/**
 * html_tdsize: exclusive for jo_printing form
 *
 * @param array $arrOdata
 * @param string $keyValue_
 * @param string $keyOutput_
 * @param string $tsg_id
 * @param array $oData_i
 * @param int $ctr_i
 * @return string
 */
function html_tdsize($arrOdata ,$keyValue_ , $keyOutput_ ,$oData_i){
	$ctr_cc=0;

	$tBox="";
	$selected="";
	$ctrtotal =0;
	$ctrtotalqty=0;
	$ctrindex=0;


	do { 
	if (!is_array($arrOdata)) return null;
	
	//header
	$tBox .="<table width='100%' cellspacing='1' cellpadding='2' bgcolor='#000000' border='0'>";
	$tBox .="<tr bgcolor='#298EBD'>";
    $tBox .="<td width='15%' align='center'>Color</td>";
	
    $tBox .="<td width='85%' align='center'>";
	$tBox .="	<table border='0' width='100%'>";
    $tBox .="	<tr>";
	foreach ($arrOdata as $key => $value) {
	
				$selected= ($value['tsg_id']==$oData_i[$ctr_cc][1])?true:"";
				$tsid = $value['ts_id'];
				$ctrindex++;
				
				if($selected!=""){
    				$tBox .="	<td align='center' width='5%'>$value[$keyOutput_]</td>";
				}
	}
    $tBox .="	<td width='10%' align='center'>TOTAL</td>";
    $tBox .="	</tr>";
    $tBox .="</table>";
	$tBox .="</td>";
    $tBox .="</tr>";
	//contents
	$ctrtotal = $ctrtotal + $oData_i[$tsid];
	$tBox .="<tr bgcolor='#FFFFFF'>";
    $tBox .="<td width='15%' align='center'>".$oData_i[$ctr_cc][0]."</td>";
	
    $tBox .="<td width='85%' align='center'>";
	$tBox .="	<table border='0' width='100%'>";
    $tBox .="	<tr>";

	foreach ($arrOdata as $key_i => $value_i) {

				$selected= ($value_i['tsg_id']==$oData_i[$ctr_cc][1])?true:"";
				$tsid_i = $value_i['ts_id'];
				
				if($selected!=""){
			
    				$tBox .="	<td align='center'  width='5%'>".$oData_i[$ctr_cc][2][$tsid_i]."</td>";
					$ctrtotal = $ctrtotal + $oData_i[$ctr_cc][2][$tsid_i];
				}
	}
    $tBox .="	<td width='10%' align='center'>$ctrtotal</td>";
    $tBox .="	</tr>";
    $tBox .="</table>";
	$tBox .="</td>";
    $tBox .="</tr>";
			
	
	$tBox .="</td>";
	$tBox .="</tr>";
	$tBox .="</table>";
	
	 $ctr_cc++; 
	} while($ctr_cc < sizeof($oData_i));
	return $tBox;
}


?>